make realiza alocação de memória para modelos internos, como map, slice, e channel, enquanto new é utilizado para alocação de 
memória de tipos.

new(T) aloca a memória para o valor zero do tipo T e retorna seu endereço de memória, que é o valor do tipo *T. Por definição, 
isto retorna um ponteiro que aponta para o valor zero de T. New() retorna ponteiros.

A função interna make(T, args) possui diferentes propósitos se comparado a new(T). make pode ser usado para slice, map, e channel, 
e retorna o tipo T com um valor inicial. A razão para fazer isto é porque os dados subjacentes destes três tipos devem ser inicializados
antes de apontar para eles. Por exemplo, um slice contém um ponteiro que aponta para um array subjacente, comprimento e capacidade.

Antes que estes dados sejam inicializados, slice é nil, então, para slice, map e channel, make inicializa seus dados subjacentes e 
atribui alguns valores adequados. Make retorna valores diferentes de zero.

Valor zero não significa valor vazio. Na maioria dos casos é o valor padrão das variáveis. Aqui está uma lista de alguns valores zero.

    int     0
    int8    0
    int32   0
    int64   0
    uint    0x0
    rune    0 // o tipo real de rune é int32
    byte    0x0 // o tipo real de byte é uint8
    float32 0 // comprimento é 4 bytes
    float64 0 // comprimento é 8 bytes
    bool    false
    string  ""
